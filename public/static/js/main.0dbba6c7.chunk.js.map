{"version":3,"sources":["components/SeatsAvailability.js","components/DrawGrid.js","App.js","serviceWorker.js","index.js"],"names":["DrawGrid","_this$props","this","props","seat","seatReserved","seatBookedByUser","react_default","a","createElement","className","map","indexOf","key","Component","seats","i","push","SeatsAvailability","state","seatAvailable","components_DrawGrid","available","App","numTickets","handleInputChange","_this","setState","initBooking","_callee","_ref2","allotedSeats","_ref3","ticket","regenerator_default","wrap","_context","prev","next","axios","get","concat","host","params","numberOfSeats","sent","data","console","log","post","travellerName","seatsBooked","Object","toConsumableArray","stop","train","reservedSeats","tickets","forEach","error","_context2","t0","_this$state","row","type","justify","input_number","min","max","onChange","size","placeholder","es_button","onClick","block","components_SeatsAvailability","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dbba6c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DrawGrid from './DrawGrid';\n\nconst seats = [];\nfor (let i = 0; i < 80; i++) {\n\tseats.push(i);\n}\n\nclass SeatsAvailability extends Component {\n\tstate = {\n\t\tseatAvailable: [\n\t\t\t1, 79\n\t\t]\n\t}\n\trender() {\n\t\tconst { seatBookedByUser, seatReserved } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<DrawGrid\n\t\t\t\t\tseat={seats}\n\t\t\t\t\tavailable={this.state.seatAvailable}\n\t\t\t\t\tseatReserved={seatReserved}\n\t\t\t\t\tseatBookedByUser={seatBookedByUser}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SeatsAvailability;\n","import React, { Component } from 'react';\n\nclass DrawGrid extends Component {\n\trender() {\n\t\tconst { seat, seatReserved, seatBookedByUser } = this.props;\n\t\treturn (\n\t\t\t<div className=\"container1\">\n\t\t\t\t<table className=\"grid\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{seat.map(seat =>\n\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\tclassName={seatReserved.indexOf(seat + '') > -1 ? 'reserved' : seatBookedByUser.indexOf(seat + '') > -1 ? 'user-reserved' : 'available'}\n\t\t\t\t\t\t\t\t\tkey={seat}>{seat} </td>)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DrawGrid;","import axios from 'axios';\nimport React, { Component } from 'react';\n\n// CSS\nimport './App.css';\nimport './core/css/material-kit.css';\n\n// AntDesign Components\nimport {\n\tButton,\n\tInputNumber,\n\tRow\n} from 'antd';\n\n// Components\nimport SeatsAvailability from './components/SeatsAvailability';\n\nimport { host } from './config.json';\n\nclass App extends Component {\n\tstate = {\n\t\tnumTickets: null,\n\t\tseatReserved: [],\n\t\tseatBookedByUser: []\n\t}\n\n\tasync componentDidMount() {\n\t\ttry {\n\t\t\tconst { data: train } = await axios.get(`${host}/trains/5d125684ef1e310017ee1d87`);\n\t\t\tlet reservedSeats = [];\n\t\t\ttrain.tickets.forEach(ticket => reservedSeats = [...reservedSeats, ...ticket.seatsBooked]);\n\t\t\tthis.setState({ seatReserved: reservedSeats });\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\thandleInputChange = numTickets => this.setState({ numTickets });\n\n\tinitBooking = async () => {\n\t\tconst { data: allotedSeats } = await axios.get(`${host}/trains/5d125684ef1e310017ee1d87/available-seats`, { params: { numberOfSeats: this.state.numTickets } });\n\t\tconsole.log(allotedSeats)\n\t\tconst { data: ticket } = await axios.post(`${host}/trains/tickets/5d125684ef1e310017ee1d87/`, { travellerName: 'Random Dude', seatsBooked: allotedSeats });\n\t\tconsole.log(ticket.seatsBooked)\n\t\tthis.setState({ seatBookedByUser: ticket.seatsBooked, seatReserved: [...this.state.seatReserved, ...this.state.seatBookedByUser] });\n\t}\n\n\trender() {\n\t\tconst { seatBookedByUser, seatReserved } = this.state;\n\t\tconsole.log(seatBookedByUser, seatReserved)\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Row className=\"mt-5 mb-2\" type=\"flex\" justify=\"center\">\n\t\t\t\t\t<InputNumber className=\"w-100\" min={0} max={7} onChange={this.handleInputChange} size=\"large\" placeholder=\"Enter number of tickets\" />\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"mb-4\" type=\"flex\" justify=\"center\">\n\t\t\t\t\t<Button onClick={this.initBooking} size=\"large\" type=\"primary\" block>Book Tickets</Button>\n\t\t\t\t</Row>\n\t\t\t\t<SeatsAvailability seatReserved={seatReserved} seatBookedByUser={seatBookedByUser} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}